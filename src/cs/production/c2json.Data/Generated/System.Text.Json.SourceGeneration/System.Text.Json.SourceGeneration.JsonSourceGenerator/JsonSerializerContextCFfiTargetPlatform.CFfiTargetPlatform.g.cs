// <auto-generated/>

#nullable enable annotations
#nullable disable warnings

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0612, CS0618

namespace c2json.Data.Serialization
{
    public partial class JsonSerializerContextCFfiTargetPlatform
    {
        private global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::c2json.Data.CFfiTargetPlatform>? _CFfiTargetPlatform;
        
        /// <summary>
        /// Defines the source generated JSON serialization contract metadata for a given type.
        /// </summary>
        public global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::c2json.Data.CFfiTargetPlatform> CFfiTargetPlatform
        {
            get => _CFfiTargetPlatform ??= (global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::c2json.Data.CFfiTargetPlatform>)Options.GetTypeInfo(typeof(global::c2json.Data.CFfiTargetPlatform));
        }
        
        private global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::c2json.Data.CFfiTargetPlatform> Create_CFfiTargetPlatform(global::System.Text.Json.JsonSerializerOptions options)
        {
            if (!TryGetTypeInfoForRuntimeCustomConverter<global::c2json.Data.CFfiTargetPlatform>(options, out global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::c2json.Data.CFfiTargetPlatform> jsonTypeInfo))
            {
                var objectInfo = new global::System.Text.Json.Serialization.Metadata.JsonObjectInfoValues<global::c2json.Data.CFfiTargetPlatform>
                {
                    ObjectCreator = () => new global::c2json.Data.CFfiTargetPlatform(),
                    ObjectWithParameterizedConstructorCreator = null,
                    PropertyMetadataInitializer = _ => CFfiTargetPlatformPropInit(options),
                    ConstructorParameterMetadataInitializer = null,
                    SerializeHandler = null
                };
                
                jsonTypeInfo = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateObjectInfo<global::c2json.Data.CFfiTargetPlatform>(options, objectInfo);
                jsonTypeInfo.NumberHandling = null;
            }
        
            jsonTypeInfo.OriginatingResolver = this;
            return jsonTypeInfo;
        }

        private static global::System.Text.Json.Serialization.Metadata.JsonPropertyInfo[] CFfiTargetPlatformPropInit(global::System.Text.Json.JsonSerializerOptions options)
        {
            var properties = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfo[12];

            var info0 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<string>
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::c2json.Data.CFfiTargetPlatform),
                Converter = null,
                Getter = static obj => ((global::c2json.Data.CFfiTargetPlatform)obj).FileName,
                Setter = static (obj, value) => ((global::c2json.Data.CFfiTargetPlatform)obj).FileName = value!,
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "FileName",
                JsonPropertyName = "fileName"
            };
            
            properties[0] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<string>(options, info0);

            var info1 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<global::c2json.Data.TargetPlatform>
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::c2json.Data.CFfiTargetPlatform),
                Converter = null,
                Getter = static obj => ((global::c2json.Data.CFfiTargetPlatform)obj).PlatformRequested,
                Setter = static (obj, value) => ((global::c2json.Data.CFfiTargetPlatform)obj).PlatformRequested = value!,
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "PlatformRequested",
                JsonPropertyName = "platformRequested"
            };
            
            properties[1] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<global::c2json.Data.TargetPlatform>(options, info1);

            var info2 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<global::c2json.Data.TargetPlatform>
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::c2json.Data.CFfiTargetPlatform),
                Converter = null,
                Getter = static obj => ((global::c2json.Data.CFfiTargetPlatform)obj).PlatformActual,
                Setter = static (obj, value) => ((global::c2json.Data.CFfiTargetPlatform)obj).PlatformActual = value!,
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "PlatformActual",
                JsonPropertyName = "platformActual"
            };
            
            properties[2] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<global::c2json.Data.TargetPlatform>(options, info2);

            var info3 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<global::System.Collections.Immutable.ImmutableDictionary<string, global::c2json.Data.Nodes.CMacroObject>>
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::c2json.Data.CFfiTargetPlatform),
                Converter = null,
                Getter = static obj => ((global::c2json.Data.CFfiTargetPlatform)obj).MacroObjects,
                Setter = static (obj, value) => ((global::c2json.Data.CFfiTargetPlatform)obj).MacroObjects = value!,
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "MacroObjects",
                JsonPropertyName = "macroObjects"
            };
            
            properties[3] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<global::System.Collections.Immutable.ImmutableDictionary<string, global::c2json.Data.Nodes.CMacroObject>>(options, info3);

            var info4 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<global::System.Collections.Immutable.ImmutableDictionary<string, global::c2json.Data.Nodes.CVariable>>
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::c2json.Data.CFfiTargetPlatform),
                Converter = null,
                Getter = static obj => ((global::c2json.Data.CFfiTargetPlatform)obj).Variables,
                Setter = static (obj, value) => ((global::c2json.Data.CFfiTargetPlatform)obj).Variables = value!,
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "Variables",
                JsonPropertyName = "variables"
            };
            
            properties[4] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<global::System.Collections.Immutable.ImmutableDictionary<string, global::c2json.Data.Nodes.CVariable>>(options, info4);

            var info5 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<global::System.Collections.Immutable.ImmutableDictionary<string, global::c2json.Data.Nodes.CFunction>>
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::c2json.Data.CFfiTargetPlatform),
                Converter = null,
                Getter = static obj => ((global::c2json.Data.CFfiTargetPlatform)obj).Functions,
                Setter = static (obj, value) => ((global::c2json.Data.CFfiTargetPlatform)obj).Functions = value!,
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "Functions",
                JsonPropertyName = "functions"
            };
            
            properties[5] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<global::System.Collections.Immutable.ImmutableDictionary<string, global::c2json.Data.Nodes.CFunction>>(options, info5);

            var info6 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<global::System.Collections.Immutable.ImmutableDictionary<string, global::c2json.Data.Nodes.CRecord>>
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::c2json.Data.CFfiTargetPlatform),
                Converter = null,
                Getter = static obj => ((global::c2json.Data.CFfiTargetPlatform)obj).Records,
                Setter = static (obj, value) => ((global::c2json.Data.CFfiTargetPlatform)obj).Records = value!,
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "Records",
                JsonPropertyName = "records"
            };
            
            properties[6] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<global::System.Collections.Immutable.ImmutableDictionary<string, global::c2json.Data.Nodes.CRecord>>(options, info6);

            var info7 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<global::System.Collections.Immutable.ImmutableDictionary<string, global::c2json.Data.Nodes.CEnum>>
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::c2json.Data.CFfiTargetPlatform),
                Converter = null,
                Getter = static obj => ((global::c2json.Data.CFfiTargetPlatform)obj).Enums,
                Setter = static (obj, value) => ((global::c2json.Data.CFfiTargetPlatform)obj).Enums = value!,
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "Enums",
                JsonPropertyName = "enums"
            };
            
            properties[7] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<global::System.Collections.Immutable.ImmutableDictionary<string, global::c2json.Data.Nodes.CEnum>>(options, info7);

            var info8 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<global::System.Collections.Immutable.ImmutableDictionary<string, global::c2json.Data.Nodes.CEnumConstant>>
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::c2json.Data.CFfiTargetPlatform),
                Converter = null,
                Getter = static obj => ((global::c2json.Data.CFfiTargetPlatform)obj).EnumConstants,
                Setter = static (obj, value) => ((global::c2json.Data.CFfiTargetPlatform)obj).EnumConstants = value!,
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "EnumConstants",
                JsonPropertyName = "enumConstants"
            };
            
            properties[8] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<global::System.Collections.Immutable.ImmutableDictionary<string, global::c2json.Data.Nodes.CEnumConstant>>(options, info8);

            var info9 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<global::System.Collections.Immutable.ImmutableDictionary<string, global::c2json.Data.Nodes.CTypeAlias>>
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::c2json.Data.CFfiTargetPlatform),
                Converter = null,
                Getter = static obj => ((global::c2json.Data.CFfiTargetPlatform)obj).TypeAliases,
                Setter = static (obj, value) => ((global::c2json.Data.CFfiTargetPlatform)obj).TypeAliases = value!,
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "TypeAliases",
                JsonPropertyName = "typeAliases"
            };
            
            properties[9] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<global::System.Collections.Immutable.ImmutableDictionary<string, global::c2json.Data.Nodes.CTypeAlias>>(options, info9);

            var info10 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<global::System.Collections.Immutable.ImmutableDictionary<string, global::c2json.Data.Nodes.COpaqueType>>
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::c2json.Data.CFfiTargetPlatform),
                Converter = null,
                Getter = static obj => ((global::c2json.Data.CFfiTargetPlatform)obj).OpaqueTypes,
                Setter = static (obj, value) => ((global::c2json.Data.CFfiTargetPlatform)obj).OpaqueTypes = value!,
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "OpaqueTypes",
                JsonPropertyName = "opaqueTypes"
            };
            
            properties[10] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<global::System.Collections.Immutable.ImmutableDictionary<string, global::c2json.Data.Nodes.COpaqueType>>(options, info10);

            var info11 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<global::System.Collections.Immutable.ImmutableDictionary<string, global::c2json.Data.Nodes.CFunctionPointer>>
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::c2json.Data.CFfiTargetPlatform),
                Converter = null,
                Getter = static obj => ((global::c2json.Data.CFfiTargetPlatform)obj).FunctionPointers,
                Setter = static (obj, value) => ((global::c2json.Data.CFfiTargetPlatform)obj).FunctionPointers = value!,
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "FunctionPointers",
                JsonPropertyName = "functionPointers"
            };
            
            properties[11] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<global::System.Collections.Immutable.ImmutableDictionary<string, global::c2json.Data.Nodes.CFunctionPointer>>(options, info11);

            return properties;
        }
    }
}

// <auto-generated/>

#nullable enable annotations
#nullable disable warnings

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0612, CS0618

namespace c2json.Data.Serialization
{
    public partial class JsonSerializerContextCAbstractSyntaxTreeTargetPlatform
    {
        private global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::c2json.Data.CTypeInfo>? _CTypeInfo;
        
        /// <summary>
        /// Defines the source generated JSON serialization contract metadata for a given type.
        /// </summary>
        public global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::c2json.Data.CTypeInfo> CTypeInfo
        {
            get => _CTypeInfo ??= (global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::c2json.Data.CTypeInfo>)Options.GetTypeInfo(typeof(global::c2json.Data.CTypeInfo));
        }
        
        private global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::c2json.Data.CTypeInfo> Create_CTypeInfo(global::System.Text.Json.JsonSerializerOptions options)
        {
            if (!TryGetTypeInfoForRuntimeCustomConverter<global::c2json.Data.CTypeInfo>(options, out global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<global::c2json.Data.CTypeInfo> jsonTypeInfo))
            {
                var objectInfo = new global::System.Text.Json.Serialization.Metadata.JsonObjectInfoValues<global::c2json.Data.CTypeInfo>
                {
                    ObjectCreator = () => new global::c2json.Data.CTypeInfo(),
                    ObjectWithParameterizedConstructorCreator = null,
                    PropertyMetadataInitializer = _ => CTypeInfoPropInit(options),
                    ConstructorParameterMetadataInitializer = null,
                    SerializeHandler = null
                };
                
                jsonTypeInfo = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateObjectInfo<global::c2json.Data.CTypeInfo>(options, objectInfo);
                jsonTypeInfo.NumberHandling = null;
            }
        
            jsonTypeInfo.OriginatingResolver = this;
            return jsonTypeInfo;
        }

        private static global::System.Text.Json.Serialization.Metadata.JsonPropertyInfo[] CTypeInfoPropInit(global::System.Text.Json.JsonSerializerOptions options)
        {
            var properties = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfo[10];

            var info0 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<string>
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::c2json.Data.CTypeInfo),
                Converter = null,
                Getter = static obj => ((global::c2json.Data.CTypeInfo)obj).Name,
                Setter = static (obj, value) => ((global::c2json.Data.CTypeInfo)obj).Name = value!,
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "Name",
                JsonPropertyName = "name"
            };
            
            properties[0] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<string>(options, info0);

            var info1 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<global::c2json.Data.CNodeKind>
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::c2json.Data.CTypeInfo),
                Converter = null,
                Getter = static obj => ((global::c2json.Data.CTypeInfo)obj).NodeKind,
                Setter = static (obj, value) => ((global::c2json.Data.CTypeInfo)obj).NodeKind = value!,
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "NodeKind",
                JsonPropertyName = "kind"
            };
            
            properties[1] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<global::c2json.Data.CNodeKind>(options, info1);

            var info2 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<int>
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::c2json.Data.CTypeInfo),
                Converter = null,
                Getter = static obj => ((global::c2json.Data.CTypeInfo)obj).SizeOf,
                Setter = static (obj, value) => ((global::c2json.Data.CTypeInfo)obj).SizeOf = value!,
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "SizeOf",
                JsonPropertyName = "sizeOf"
            };
            
            properties[2] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<int>(options, info2);

            var info3 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<int?>
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::c2json.Data.CTypeInfo),
                Converter = null,
                Getter = static obj => ((global::c2json.Data.CTypeInfo)obj).AlignOf,
                Setter = static (obj, value) => ((global::c2json.Data.CTypeInfo)obj).AlignOf = value!,
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "AlignOf",
                JsonPropertyName = "alignOf"
            };
            
            properties[3] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<int?>(options, info3);

            var info4 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<int?>
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::c2json.Data.CTypeInfo),
                Converter = null,
                Getter = static obj => ((global::c2json.Data.CTypeInfo)obj).ElementSize,
                Setter = static (obj, value) => ((global::c2json.Data.CTypeInfo)obj).ElementSize = value!,
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "ElementSize",
                JsonPropertyName = "sizeOfElement"
            };
            
            properties[4] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<int?>(options, info4);

            var info5 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<int?>
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::c2json.Data.CTypeInfo),
                Converter = null,
                Getter = static obj => ((global::c2json.Data.CTypeInfo)obj).ArraySizeOf,
                Setter = static (obj, value) => ((global::c2json.Data.CTypeInfo)obj).ArraySizeOf = value!,
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "ArraySizeOf",
                JsonPropertyName = "arraySize"
            };
            
            properties[5] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<int?>(options, info5);

            var info6 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<bool?>
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::c2json.Data.CTypeInfo),
                Converter = null,
                Getter = static obj => ((global::c2json.Data.CTypeInfo)obj).IsAnonymous,
                Setter = static (obj, value) => ((global::c2json.Data.CTypeInfo)obj).IsAnonymous = value!,
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "IsAnonymous",
                JsonPropertyName = "isAnonymous"
            };
            
            properties[6] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<bool?>(options, info6);

            var info7 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<bool>
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::c2json.Data.CTypeInfo),
                Converter = null,
                Getter = static obj => ((global::c2json.Data.CTypeInfo)obj).IsConst,
                Setter = static (obj, value) => ((global::c2json.Data.CTypeInfo)obj).IsConst = value!,
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "IsConst",
                JsonPropertyName = "isConst"
            };
            
            properties[7] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<bool>(options, info7);

            var info8 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<global::c2json.Data.CLocation?>
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::c2json.Data.CTypeInfo),
                Converter = null,
                Getter = static obj => ((global::c2json.Data.CTypeInfo)obj).Location,
                Setter = static (obj, value) => ((global::c2json.Data.CTypeInfo)obj).Location = value!,
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "Location",
                JsonPropertyName = "location"
            };
            
            properties[8] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<global::c2json.Data.CLocation?>(options, info8);

            var info9 = new global::System.Text.Json.Serialization.Metadata.JsonPropertyInfoValues<global::c2json.Data.CTypeInfo>
            {
                IsProperty = true,
                IsPublic = true,
                IsVirtual = false,
                DeclaringType = typeof(global::c2json.Data.CTypeInfo),
                Converter = null,
                Getter = static obj => ((global::c2json.Data.CTypeInfo)obj).InnerTypeInfo,
                Setter = static (obj, value) => ((global::c2json.Data.CTypeInfo)obj).InnerTypeInfo = value!,
                IgnoreCondition = null,
                HasJsonInclude = false,
                IsExtensionData = false,
                NumberHandling = null,
                PropertyName = "InnerTypeInfo",
                JsonPropertyName = "innerType"
            };
            
            properties[9] = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreatePropertyInfo<global::c2json.Data.CTypeInfo>(options, info9);

            return properties;
        }
    }
}
